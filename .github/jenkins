set -e
#IP=<IP of the runner>
#RHEL_OST_IMAGE=<OST job name for rhel8 distro>
#
# Part 1
# ScriptTrigger and the step before actual OST
#

rm -f queue vars token
curl --max-filesize 256 -O http://${IP}:2222/queue
PR_URL="$(sed -n 1p queue)"
SUITE="$(sed -n 2p queue)"
DISTRO="$(sed -n 3p queue)"
echo "$PR_URL" | egrep '^https://(api.|www.)?github.com(/repos)?/oVirt/'
echo "$SUITE"  | egrep '^(basic-suite-master|he-basic-suite-master|ansible-suite-master|tr-suite-master|network-suite-master|tr-suite-master)$'
echo "$DISTRO" | egrep '^(el8stream|el9stream|rhel8)$'

#
# Part 2
# only the steps before and after actual OST job
#
# OST application ID
APP_ID=164117
# app access token
if [[ -z "$EXPIRE_AT" || ! -f token || $(date +%s) -gt "$EXPIRE_AT" ]]; then
    # access token URL, id of an installation doesn't change, so let's hardcode it
    # curl -sS -H "Authorization: Bearer $JWT" https://api.github.com/app/installations | jq .[0].access_tokens_url
    AT_URL="https://api.github.com/app/installations/22187590/access_tokens"
    # private key for JWT
    # OST_APP_PRIVATE_KEY_FILENAME= <passed from jenkins>
    EXPIRE_AT=$(($(date +%s)+520)) # use within 9 minutes, 10 minutes max expiration
    HEADER='{"alg":"RS256","typ":"JWT"}'
    PAYLOAD="{\"iat\":$(($(date +%s)-60)),\"exp\":$((${EXPIRE_AT}+60)),\"iss\":${APP_ID}}"
    JWT_CONTENT=$(echo -n $HEADER | openssl enc -base64 -A | tr '+/' '-_' | tr -d '='; echo -n .; echo $PAYLOAD | openssl enc -base64 -A | tr '+/' '-_' | tr -d '=')
    JWT=$(echo -n "${JWT_CONTENT}.$(echo -n ${JWT_CONTENT} | openssl dgst -binary -sha256 -sign ${OST_APP_PRIVATE_KEY_FILENAME} | openssl enc -base64 -A | tr '+/' '-_' | tr -d '=')")
    curl -sS -o token -X POST -H "Authorization: Bearer $JWT" ${AT_URL}
    cat token
fi
OST_APP_TOKEN=$(jq -r .token token)

[[ -z "$SHA" ]] && SHA=$(curl -sS ${PR_URL} | jq -r .head.sha)
API_URL_BASE=$(echo ${PR_URL} | cut -d / -f 1-6)
[[ "$DISTRO" = "el8stream" ]] && OST_IMAGE="el8stream+https://download.copr.fedorainfracloud.org/results/ovirt/ovirt-master-snapshot/centos-stream-8-x86_64"
[[ "$DISTRO" = "el9stream" ]] && OST_IMAGE="el9stream+https://download.copr.fedorainfracloud.org/results/ovirt/ovirt-master-snapshot/centos-stream-9-x86_64"
[[ "$DISTRO" = "rhel8" ]] && OST_IMAGE=${RHEL_OST_IMAGE}
ost_app_response() { # ost_app_response status conclusion summary
        echo "response $1 $2 $3"
        [[ -n "$2" ]] && local CONCLUSION=", \"conclusion\":\"${2}\""
        local HTTP_METHOD=POST
        # create a new check run with POST on the first call, PATCH existing for follow-up calls
        [[ -n "$CHECK_RUN_ID" ]] && { HTTP_METHOD=PATCH; }
        CHECK_RUN_ID=$(curl -sS -H "Authorization: token $OST_APP_TOKEN" -X ${HTTP_METHOD} -d "{\"name\":\"OST\", \"head_sha\":\"${SHA}\", \"status\":\"${1}\"${CONCLUSION}, \"output\":{\"title\":\"${SUITE}(${DISTRO}) ${2}\", \"summary\":\"${3}\"}}" "${API_URL_BASE}/check-runs${CHECK_RUN_ID:+/$CHECK_RUN_ID}" | jq -r .id)
}

if [[ -z "$TRIGGERED_JOB_NAMES" ]]; then # before OST run
    # do we already have a check suite? creating a check-run will create a suite too, but it doesn't always update it.
    CHECK_SUITE_ID=$(curl -sS "${API_URL_BASE}/commits/${SHA}/check-suites" | jq ".check_suites[] | select(.app.id==$APP_ID) | .id")
    [[ -n "$CHECK_SUITE_ID" ]] && curl -sS -H "Authorization: token $OST_APP_TOKEN" -X POST "${API_URL_BASE}/check-suites/${CHECK_SUITE_ID}/rerequest"
    # PR by a member or approved by a member
    [[ $(curl -sS -H "Authorization: token $OST_APP_TOKEN" ${PR_URL} | jq -r .author_association) = "MEMBER" ]] && APPROVED=author
    if [[ -z "$APPROVED" ]]; then
        curl -sS -o reviews "${PR_URL}/reviews"
        APPROVED=$(jq -r ".[] | select(.author_association==\"MEMBER\" and .state==\"APPROVED\" and .commit_id==\"${SHA}\") | .user.login" reviews)
    fi
    if [[ -z "$APPROVED" ]]; then
        ost_app_response completed cancelled "non approved user"
        exit 1
    fi
    ost_app_response in_progress "" "Job https://redir.apps.ovirt.org/dj/$(echo $BUILD_URL| cut -d/ -f4-) is starting OST on ${SHA}, ${APPROVED} approved."

    # figure out if this is an OST, ost-images or non-OST PR
    if [[ "$PR_URL" =~ /ovirt-system-tests/ ]]; then
        PR_NO="$(echo ${PR_URL} | egrep -o '[0-9]+$')"
        OST_REFSPEC="pull/${PR_NO}/head"
        CUSTOM_REPOS=
        CUSTOM_OST_IMAGES_REPO=
    elif [[ "$PR_URL" =~ /ost-images/ ]]; then
        PR_NO="$(echo ${PR_URL} | egrep -o '[0-9]+$')"
        OST_REFSPEC="pull/${PR_NO}/head"
        CUSTOM_REPOS=
        CUSTOM_OST_IMAGES_REPO="build-me-some"
    else
        OST_REFSPEC=
        CUSTOM_REPOS="${PR_URL}"
        CUSTOM_OST_IMAGES_REPO=
    fi
    cat << EOF > vars
PR_URL=$PR_URL
SUITE=$SUITE
DISTRO=$DISTRO
OST_IMAGE=$OST_IMAGE
SHA=$SHA
EXPIRE_AT=$EXPIRE_AT
CHECK_RUN_ID=$CHECK_RUN_ID
OST_REFSPEC=$OST_REFSPEC
CUSTOM_REPOS=$CUSTOM_REPOS
CUSTOM_OST_IMAGES_REPO=$CUSTOM_OST_IMAGES_REPO
EOF
    cat vars
else # after actual OST, with injected vars
    echo processing results

    JUST_THE_LAST_JOB=$(echo $TRIGGERED_JOB_NAMES | cut -d, -f2-)
    BR="TRIGGERED_BUILD_RESULT_${JUST_THE_LAST_JOB}"
    BN="TRIGGERED_BUILD_NUMBERS_${JUST_THE_LAST_JOB}"
    RESULT="${!BR}"
    OST_JOB_NUMBER="${!BN}"
    echo "result $RESULT"
    ACTUAL_JOB="https://redir.apps.ovirt.org/dj/job/${JOB_NAME%-*}_manual/${OST_JOB_NUMBER}"
    if [[ "$RESULT" == "SUCCESS" ]]; then
        ost_app_response completed success "job ${ACTUAL_JOB} succeeded"
    elif [[ "${!BR}" == "FAILURE" ]]; then
        ost_app_response completed failure "job ${ACTUAL_JOB} failed"
    else
        ost_app_response completed cancelled "job ${ACTUAL_JOB} aborted"
    fi
fi
