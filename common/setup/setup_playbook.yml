#!/usr/bin/ansible-playbook

- name: Set up the environment for running OST
  hosts: all

  vars:
    default_ost_images_repo_url: 'https://templates.ovirt.org/yum/'
    default_ost_images_rpms:
      - ost-images-el8stream-engine-installed
      - ost-images-el8stream-host-installed
      - ost-images-node-base
      - ost-images-storage-base

  tasks:
    - name: Enable nested virtualization on intel
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/kvm.conf
        create: yes
        line: options kvm_intel nested=1
        mode: 0644
      become: true
      when: ansible_facts['processor'][1] == 'GenuineIntel'

    - name: Enable nested virtualization on amd
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/kvm.conf
        create: yes
        line: options kvm_amd nested=1
        mode: 0644
      become: true
      when: ansible_facts['processor'][1] == 'AuthenticAMD'

    - name: Set accept_ra on ipv6
      ansible.builtin.lineinfile:
        path: /etc/sysctl.d/90-ost-ipv6-ra.conf
        create: yes
        line: net.ipv6.conf.all.accept_ra=2
        mode: 0644
      become: true

    - name: Increase per-user FD limit
      ansible.builtin.lineinfile:
        path: /etc/security/limits.d/ost.conf
        create: yes
        line: "*    soft    nofile    65535"
        mode: 0644
      become: true

    - name: Setup ost-images repo
      ansible.builtin.yum_repository:
        name: ost-images
        description: ost-images
        baseurl: "{{ ost_images_repo_url | default(default_ost_images_repo_url) }}"
        gpgcheck: no
      become: true

    - name: Setup distro-related vars
      ansible.builtin.set_fact:
        el9: "{{ ansible_facts['distribution_major_version'] | int == 9 }}"

    - name: Setup package names based on distro-related
      ansible.builtin.set_fact:
        python_pkg: "{{ 'python3' if el9 else 'python39' }}"
        ansible_pkg: ansible-core

    - name: Install packages and cleanup epel if necessary

      block:
        - name: Install epel
          ansible.builtin.dnf:
            name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
            disable_gpg_check: yes
          when: not el9
          become: true
          register: epel

        - name: Make sure any version of ansible is available
          ansible.builtin.dnf:
            name:
              - "{{ ansible_pkg }}"
            state: present
          become: true

        - name: Install galaxy collections
          ansible.builtin.command: ansible-galaxy collection install community.general openstack.cloud

        - name: Install required packages for OST
          ansible.builtin.dnf:
            name:
              - gcc
              - git
              - libcurl-devel
              - libvirt
              - libxml2-devel
              - openssl
              - openssl-devel
              - "{{ python_pkg }}"
              - "{{ python_pkg }}-devel"
              - qemu-kvm
            state: latest
          become: true

        - name: Install required packages for building ost-images
          ansible.builtin.dnf:
            name:
              - autoconf
              - automake
              - createrepo
              - jq
              - libguestfs-tools-c
              - libvirt-client
              - libvirt-daemon-config-network
              - make
              - qemu-img
              - rpm-build
              - virt-install
            state: latest
          become: true

      always:
        - name: Remove epel if it was added
          ansible.builtin.dnf:
            name: epel-release-8
            state: absent
          when: epel.changed
          become: true

    - name: Install ost images
      ansible.builtin.dnf:
        name: "{{ ost_images_rpms | default(default_ost_images_rpms) }}"
      become: true

    - name: Add user to relevant groups
      ansible.builtin.user:
        name: "{{ ansible_facts['user_id'] }}"
        groups:
          - qemu
        append: yes
      become: true

    - name: Add qemu to the user group
      ansible.builtin.user:
        name: qemu
        groups:
          - "{{ ansible_facts['user_id'] }}"
        append: yes
      become: true

    - name: Allow user to manage libvirt
      ansible.builtin.template:
        dest: /etc/polkit-1/localauthority/50-local.d/ost-libvirt-{{ ansible_facts['user_id'] }}.pkla
        group: root
        mode: '0644'
        owner: root
        src: ost-libvirt.pkla.in
      become: true

    - name: Restart polkit
      ansible.builtin.systemd:
        name: polkit
        state: restarted
      become: true

    - name: Set user home directory permissions
      ansible.builtin.file:
        path: "{{ ansible_facts['user_dir'] }}"
        mode: 0751
      become: true

    - name: Allow virtlogd to write console logs
      ansible.builtin.command: semanage permissive -a virtlogd_t
      become: true

    - name: Allow port 2222 for IPv6 socks proxy
      block:
        - name: Copy default libvirt config
          ansible.builtin.copy:
            src: /usr/lib/firewalld/zones/libvirt.xml
            dest: /etc/firewalld/zones/libvirt.xml
            mode: 0644
          become: true

        - name: Allow port 2222
          ansible.builtin.replace:
            path: /etc/firewalld/zones/libvirt.xml
            regexp: '^(.*service name.*ssh.*\n)(?!<port port="2222" protocol="tcp"/>)'
            replace: '\1<port port="2222" protocol="tcp"/>\n'
          become: true

        - name: Reload firewall
          ansible.builtin.shell: firewall-cmd --state && firewall-cmd --reload
          become: true
